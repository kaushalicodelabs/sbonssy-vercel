"use client";

const CompensationStep = ({
  values,
  errors,
  touched,
  handleChange,
  handleBlur,
  setFieldValue,
}) => {
  const compensationTypes = [
    {
      id: "pay-per-sale",
      label: "Pay Per Sale",
      description: [
        "Commission based on each sale generated by an affiliate.",
        "What you set: % of the sale value (e.g., 10%)",
        "What affiliates get: That % of each sale they generate",
        "Platform fee: 20% of affiliate commission",
        "Example: For a €100 sale with a 10% commission:",
        "- Affiliate earns: €10",
        "- Platform fee: €2",
        "- Total cost to you: €12",
      ],
    },
    {
      id: "pay-per-lead",
      label: "Pay Per Lead",
      description: [
        "Fixed payment for each lead or signup driven by an affiliate.",
        "What you set: Fixed € amount per lead/signup (e.g., €5)",
        "What affiliates get: That amount for every valid lead",
        "Platform fee: 20% of affiliate payment",
        "Example: €5 per lead:",
        "- Affiliate earns: €5",
        "- Platform fee: €1",
        "- Total cost to you: €6",
      ],
    },
    {
      id: "pay-per-click",
      label: "Pay Per Click",
      description: [
        "Fixed amount paid each time someone clicks on an affiliate link.",
        "What you set: Fixed € amount per click (e.g., €0.50)",
        "What affiliates get: That amount per unique click",
        "Platform fee: 20% of affiliate payment",
        "Example: €0.50 per click:",
        "- Affiliate earns: €0.50",
        "- Platform fee: €0.10",
        "- Total cost to you: €0.60",
      ],
    },
    {
      id: "flat-fee",
      label: "Flat Fee",
      description: [
        "One-time fixed payment for an affiliate’s participation in your campaign.",
        "What you set: Flat fee (e.g., €50 per affiliate)",
        "What affiliates get: That amount once accepted and confirmed",
        "Platform fee: 20% of flat fee",
        "Example: €50 flat fee:",
        "- Affiliate earns: €50",
        "- Platform fee: €10",
        "- Total cost to you: €60",
      ],
    },
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold text-gray-800 mb-4">
        Compensation Structure
      </h2>

      <div>
        <label className="block mb-2 text-gray-700">
          Choose how you want to reward sport ambassadors. The amount you set
          here is what they receive. Our platform takes a 20% fee on top of the
          affiliate payout.
        </label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {compensationTypes.map((type) => (
            <label
              key={type.id}
              className={`p-4 border rounded-lg cursor-pointer hover:bg-gray-50 ${
                values.compensation.type === type.id
                  ? "border-blue-500 bg-blue-50"
                  : ""
              }`}
            >
              <div className="flex items-start">
                <input
                  type="radio"
                  name="compensation.type"
                  value={type.id}
                  checked={values.compensation.type === type.id}
                  onChange={(e) => {
                    setFieldValue("compensation.type", e.target.value);
                    setFieldValue("compensation.commission", "");
                    setFieldValue("compensation.amount", "");
                  }}
                  onBlur={handleBlur}
                  className="mt-1 h-4 w-4 text-blue-600 rounded"
                />
                <div className="ml-3">
                  <span className="block text-gray-800 font-medium">
                    {type.label}
                  </span>
                  {values.compensation.type === type.id && (
                    <div className="mt-2 text-sm text-gray-500 space-y-1">
                      {type.description.map((line, index) => (
                        <p key={index}>{line}</p>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </label>
          ))}
        </div>
        {touched.compensation?.type && errors.compensation?.type && (
          <p className="mt-1 text-sm text-red-600">
            {errors.compensation.type}
          </p>
        )}
      </div>

      {values.compensation.type === "pay-per-sale" && (
        <div>
          <label className="block mb-2 text-gray-700">Commission Rate</label>
          <div className="relative">
            <input
              type="number"
              name="compensation.commission"
              value={values.compensation.commission}
              onChange={handleChange}
              onBlur={handleBlur}
              className="w-full p-3 border rounded-lg focus:ring-blue-500 focus:border-blue-500"
              placeholder="10"
              min="0"
              step="0.1"
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-500">
              %
            </div>
          </div>
          {touched.compensation?.commission &&
            errors.compensation?.commission && (
              <p className="mt-1 text-sm text-red-600">
                {errors.compensation.commission}
              </p>
            )}
        </div>
      )}

      {["pay-per-lead", "pay-per-click", "flat-fee"].includes(
        values.compensation.type
      ) && (
        <div>
          <label className="block mb-2 text-gray-700">
            {values.compensation.type === "flat-fee"
              ? "Flat Fee Amount"
              : values.compensation.type === "pay-per-lead"
              ? "Payout Per Lead"
              : "Payout Per Click"}
          </label>
          <div className="relative">
            <input
              type="number"
              name="compensation.amount"
              value={values.compensation.amount}
              onChange={handleChange}
              onBlur={handleBlur}
              className="w-full p-3 border rounded-lg focus:ring-blue-500 focus:border-blue-500"
              placeholder={
                values.compensation.type === "pay-per-click" ? "0.50" : "5"
              }
              min="0"
              step={values.compensation.type === "pay-per-click" ? "0.01" : "1"}
            />
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-500">
              €
            </div>
          </div>
          {touched.compensation?.amount && errors.compensation?.amount && (
            <p className="mt-1 text-sm text-red-600">
              {errors.compensation.amount}
            </p>
          )}
        </div>
      )}

      <div>
        <label className="flex items-center space-x-3">
          <div className="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              name="compensation.gifting"
              checked={values.compensation.gifting}
              onChange={handleChange}
              onBlur={handleBlur}
              className="sr-only peer"
            />
            <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
          </div>
          <span className="text-gray-700 font-medium">Product Gifting</span>
        </label>
        <p className="mt-1 text-sm text-gray-500">
          Enable creators to request your products for testing, allowing them to
          promote your campaign more authentically.
        </p>
      </div>
    </div>
  );
};

export default CompensationStep;
